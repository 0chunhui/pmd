<?xml version="1.0"?>

<ruleset name="Code Size" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<description>
The Code Size ruleset contains rules that find problems related to code size or complexity.
  </description>


	<rule name="ExcessiveParameterList" message="Avoid long parameter lists."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.ExcessiveParameterListRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#ExcessiveParameterList">
		<description>
Methods with numerous parameters are a challenge to maintain, especially if most of them share the
same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public void addPerson(		// too many arguments liable to be mixed up
	int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {

	. . . .
}
 
public void addPerson(		// preferred approach
	Date birthdate, BodyMeasurements measurements, int ssn) {

	. . . .
}
]]>
   </example>
	</rule>

<rule name="NcssMethodCount" message="The method {0}() has an NCSS line count of {1}"
   class="net.sourceforge.pmd.lang.apex.rule.codesize.NcssMethodCountRule"
   externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#NcssMethodCount">
    <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
   <example>
<![CDATA[
public class Foo extends Bar {
 public Integer methd() {
     super.methd();





 //this method only has 1 NCSS lines
      return 1;
 }
}
]]>
   </example>
   </rule>

<rule name="NcssTypeCount" message="The type has an NCSS line count of {0}"
   class="net.sourceforge.pmd.lang.apex.rule.codesize.NcssTypeCountRule"
   externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#NcssTypeCount">
    <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
   <example>
<![CDATA[
public class Foo extends Bar {
 public Foo() {
 //this class only has 6 NCSS lines
     super();





      super.foo();
 }
}
]]>
   </example></rule>

<rule name="NcssConstructorCount" message="The constructor with {0} parameters has an NCSS line count of {1}"
   class="net.sourceforge.pmd.lang.apex.rule.codesize.NcssConstructorCountRule"
   externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#NcssConstructorCount">
    <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
   <example>
<![CDATA[
public class Foo extends Bar {
 public Foo() {
     super();





 //this constructor only has 1 NCSS lines
      super.foo();
 }
}
]]>
   </example>
</rule>
 
	<rule name="StdCyclomaticComplexity"
		message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.StdCyclomaticComplexityRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#StdCyclomaticComplexity">
		<description>
      <![CDATA[
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
    ]]>
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public class Foo {    // This has a Cyclomatic Complexity = 12
1   public void example()  {
2       if (a == b || (c == d && e == f))  { // Only one
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}
]]>
   </example>
	</rule>

	<rule name="TooManyFields" message="Too many fields"
		class="net.sourceforge.pmd.lang.apex.rule.codesize.TooManyFieldsRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#TooManyFields">
		<description>
Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,
possibly through grouping related fields in new objects.  For example, a class with individual 
city/state/zip fields could park them within a single Address field.
      </description>
		<priority>3</priority>
		<example>
   <![CDATA[
public class Person {	// too many separate fields
   int birthYear;
   int birthMonth;
   int birthDate;
   float height;
   float weight;
}

public class Person {	// this is more manageable
   Date birthDate;
   BodyMeasurements measurements;
}
   ]]>
      </example>
	</rule>
	
	<rule name="ExcessivePublicCount"
    since="1.04"
    message="This class has a bunch of public methods and attributes"
    class="net.sourceforge.pmd.lang.apex.rule.codesize.ExcessivePublicCountRule"
          externalInfoUrl="${pmd.website.baseurl}/rules/java/codesize.html#ExcessivePublicCount">
    <description>
Classes with large numbers of public methods and attributes require disproportionate testing efforts
since combinational side effects grow rapidly and increase risk. Refactoring these classes into
smaller ones not only increases testability and reliability but also allows new variations to be
developed easily.
    </description>
    <priority>3</priority>
    <example>
    <![CDATA[
public class Foo {
	public String value;
	public Bar something;
	public Variable var;
 // [... more more public attributes ...]
 
	public void doWork() {}
	public void doMoreWork() {}
	public void doWorkAgain() {}
 // [... more more public methods ...]
}
    ]]>
    </example>
    </rule>

</ruleset>