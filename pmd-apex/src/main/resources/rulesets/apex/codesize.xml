<?xml version="1.0"?>

<ruleset name="Code Size" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<description>
The Code Size ruleset contains rules that find problems related to code size or complexity.
  </description>

	<rule name="ExcessiveMethodLength" message="Avoid really long methods."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.ExcessiveMethodLengthRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#ExcessiveMethodLength">
		<description>
When methods are excessively long this usually indicates that the method is doing more than its
name/signature might suggest. They also become challenging for others to digest since excessive 
scrolling causes readers to lose focus.
Try to reduce the method length by creating helper methods and removing any copy/pasted code.
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public void doSomething() {
	System.out.println("Hello world!");
	System.out.println("Hello world!");
		// 98 copies omitted for brevity.
}

]]>
   </example>
	</rule>

	<rule name="ExcessiveParameterList" message="Avoid long parameter lists."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.ExcessiveParameterListRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#ExcessiveParameterList">
		<description>
Methods with numerous parameters are a challenge to maintain, especially if most of them share the
same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public void addPerson(		// too many arguments liable to be mixed up
	int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {

	. . . .
}
 
public void addPerson(		// preferred approach
	Date birthdate, BodyMeasurements measurements, int ssn) {

	. . . .
}
]]>
   </example>
	</rule>

	<rule name="ExcessiveClassLength" message="Avoid really long classes."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.ExcessiveClassLengthRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#ExcessiveClassLength">
		<description>
Excessive class file lengths are usually indications that the class may be burdened with excessive 
responsibilities that could be provided by external classes or functions. In breaking these methods
apart the code becomes more managable and ripe for reuse.
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public class Foo {
	public void bar1() {
    // 1000 lines of code
	}
	public void bar2() {
    // 1000 lines of code
	}
    public void bar3() {
    // 1000 lines of code
	}
	
	
    public void barN() {
    // 1000 lines of code
	}
}
]]>
   </example>
	</rule>


	<rule name="StdCyclomaticComplexity"
		message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
		class="net.sourceforge.pmd.lang.apex.rule.codesize.StdCyclomaticComplexityRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#StdCyclomaticComplexity">
		<description>
      <![CDATA[
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
    ]]>
   </description>
		<priority>3</priority>
		<example>
<![CDATA[
public class Foo {    // This has a Cyclomatic Complexity = 12
1   public void example()  {
2       if (a == b || (c == d && e == f))  { // Only one
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}
]]>
   </example>
	</rule>

	<rule name="TooManyFields" message="Too many fields"
		class="net.sourceforge.pmd.lang.apex.rule.codesize.TooManyFieldsRule"
		externalInfoUrl="${pmd.website.baseurl}/rules/apex/codesize.html#TooManyFields">
		<description>
Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,
possibly through grouping related fields in new objects.  For example, a class with individual 
city/state/zip fields could park them within a single Address field.
      </description>
		<priority>3</priority>
		<example>
   <![CDATA[
public class Person {	// too many separate fields
   int birthYear;
   int birthMonth;
   int birthDate;
   float height;
   float weight;
}

public class Person {	// this is more manageable
   Date birthDate;
   BodyMeasurements measurements;
}
   ]]>
      </example>
	</rule>

</ruleset>