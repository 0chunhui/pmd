/* Generated By:JavaCC: Do not edit this line. PLSQLParserTreeConstants.java Version 5.0 */
package net.sourceforge.pmd.lang.plsql.ast;

public interface PLSQLParserTreeConstants
{
  public int JJTINPUT = 0;
  public int JJTSQLPLUSCOMMAND = 1;
  public int JJTGLOBAL = 2;
  public int JJTBLOCK = 3;
  public int JJTPACKAGESPECIFICATION = 4;
  public int JJTPACKAGEBODY = 5;
  public int JJTDECLARATIVEUNIT = 6;
  public int JJTDECLARATIVESECTION = 7;
  public int JJTCOMPILATIONDECLARATIONFRAGMENT = 8;
  public int JJTPROGRAMUNIT = 9;
  public int JJTOBJECTNAMEDECLARATION = 10;
  public int JJTFORMALPARAMETER = 11;
  public int JJTMETHODDECLARATION = 12;
  public int JJTMETHODDECLARATOR = 13;
  public int JJTFORMALPARAMETERS = 14;
  public int JJTVARIABLEORCONSTANTDECLARATOR = 15;
  public int JJTVARIABLEORCONSTANTDECLARATORID = 16;
  public int JJTVARIABLEORCONSTANTINITIALIZER = 17;
  public int JJTDATATYPE = 18;
  public int JJTCOMPILATIONDATATYPE = 19;
  public int JJTCOLLECTIONTYPENAME = 20;
  public int JJTSCALARDATATYPENAME = 21;
  public int JJTDATETIMELITERAL = 22;
  public int JJTEXCEPTIONHANDLER = 23;
  public int JJTSKIP2NEXTTERMINATOR = 24;
  public int JJTSKIP2NEXTOCCURRENCE = 25;
  public int JJTSKIPPASTNEXTOCCURRENCE = 26;
  public int JJTSKIP2NEXTTOKENOCCURRENCE = 27;
  public int JJTSKIPPASTNEXTTOKENOCCURRENCE = 28;
  public int JJTREAD2NEXTOCCURRENCE = 29;
  public int JJTREADPASTNEXTOCCURRENCE = 30;
  public int JJTSQLSTATEMENT = 31;
  public int JJTWRAPPEDOBJECT = 32;
  public int JJTUNLABELLEDSTATEMENT = 33;
  public int JJTSTATEMENT = 34;
  public int JJTLABELLEDSTATEMENT = 35;
  public int JJTCASESTATEMENT = 36;
  public int JJTCASEWHENCLAUSE = 37;
  public int JJTELSECLAUSE = 38;
  public int JJTELSIFCLAUSE = 39;
  public int JJTLOOPSTATEMENT = 40;
  public int JJTFORSTATEMENT = 41;
  public int JJTWHILESTATEMENT = 42;
  public int JJTIFSTATEMENT = 43;
  public int JJTFORINDEX = 44;
  public int JJTFORALLINDEX = 45;
  public int JJTFORALLSTATEMENT = 46;
  public int JJTGOTOSTATEMENT = 47;
  public int JJTRETURNSTATEMENT = 48;
  public int JJTCONTINUESTATEMENT = 49;
  public int JJTEXITSTATEMENT = 50;
  public int JJTRAISESTATEMENT = 51;
  public int JJTCLOSESTATEMENT = 52;
  public int JJTOPENSTATEMENT = 53;
  public int JJTFETCHSTATEMENT = 54;
  public int JJTEMBEDDEDSQLSTATEMENT = 55;
  public int JJTPIPELINESTATEMENT = 56;
  public int JJTCONDITIONALCOMPILATIONSTATEMENT = 57;
  public int JJTSUBTYPEDEFINITION = 58;
  public int JJTFIELDDECLARATION = 59;
  public int JJTCOLLECTIONTYPEDEFINITION = 60;
  public int JJTCOLLECTIONDECLARATION = 61;
  public int JJTOBJECTDECLARATION = 62;
  public int JJTCALLSPECTAIL = 63;
  public int JJTCURSORUNIT = 64;
  public int JJTCURSORSPECIFICATION = 65;
  public int JJTCURSORBODY = 66;
  public int JJTEXPRESSION = 67;
  public int JJTCOMPILATIONEXPRESSION = 68;
  public int JJTASSIGNMENT = 69;
  public int JJTCASEEXPRESSION = 70;
  public int JJTLIKEEXPRESSION = 71;
  public int JJTTRIMEXPRESSION = 72;
  public int JJTOBJECTEXPRESSION = 73;
  public int JJTCONDITIONALOREXPRESSION = 74;
  public int JJTCONDITIONALANDEXPRESSION = 75;
  public int JJTEQUALITYEXPRESSION = 76;
  public int JJTRELATIONALEXPRESSION = 77;
  public int JJTADDITIVEEXPRESSION = 78;
  public int JJTSTRINGEXPRESSION = 79;
  public int JJTMULTIPLICATIVEEXPRESSION = 80;
  public int JJTUNARYEXPRESSION = 81;
  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 82;
  public int JJTPRIMARYEXPRESSION = 83;
  public int JJTPRIMARYPREFIX = 84;
  public int JJTPRIMARYSUFFIX = 85;
  public int JJTLITERAL = 86;
  public int JJTSTRINGLITERAL = 87;
  public int JJTBOOLEANLITERAL = 88;
  public int JJTNULLLITERAL = 89;
  public int JJTMULTISETCONDITION = 90;
  public int JJTNUMERICLITERAL = 91;
  public int JJTLABEL = 92;
  public int JJTNAME = 93;
  public int JJTQUALIFIEDNAME = 94;
  public int JJTARGUMENTS = 95;
  public int JJTARGUMENTLIST = 96;
  public int JJTARGUMENT = 97;
  public int JJTVARIABLEORCONSTANTDECLARATION = 98;
  public int JJTDATATYPEDECLARATION = 99;
  public int JJTPRAGMA = 100;
  public int JJTEXCEPTIONDECLARATION = 101;
  public int JJTPARALLELCLAUSE = 102;
  public int JJTTABLE = 103;
  public int JJTTABLECOLUMN = 104;
  public int JJTVIEW = 105;
  public int JJTSYNONYM = 106;
  public int JJTDIRECTORY = 107;
  public int JJTDATABASELINK = 108;
  public int JJTVIEWCOLUMN = 109;
  public int JJTCOMMENT = 110;
  public int JJTTYPEMETHOD = 111;
  public int JJTTYPESPECIFICATION = 112;
  public int JJTALTERTYPESPEC = 113;
  public int JJTATTRIBUTEDECLARATION = 114;
  public int JJTATTRIBUTE = 115;
  public int JJTPRAGMACLAUSE = 116;
  public int JJTTRIGGERUNIT = 117;
  public int JJTTRIGGERTIMINGPOINTSECTION = 118;
  public int JJTCOMPOUNDTRIGGERBLOCK = 119;
  public int JJTNONDMLTRIGGER = 120;
  public int JJTDDLEVENT = 121;
  public int JJTDATABASEEVENT = 122;
  public int JJTNONDMLEVENT = 123;
  public int JJTALTERTRIGGER = 124;
  public int JJTKEYWORD_RESERVED = 125;
  public int JJTKEYWORD_UNRESERVED = 126;
  public int JJTID = 127;
  public int JJTUNQUALIFIEDID = 128;
  public int JJTQUALIFIEDID = 129;
  public int JJTTYPEKEYWORD = 130;
  public int JJTJAVAINTERFACECLASS = 131;
  public int JJTEQUALSOLDIDNEWID = 132;


  public String[] jjtNodeName = {
    "Input",
    "SqlPlusCommand",
    "Global",
    "Block",
    "PackageSpecification",
    "PackageBody",
    "DeclarativeUnit",
    "DeclarativeSection",
    "CompilationDeclarationFragment",
    "ProgramUnit",
    "ObjectNameDeclaration",
    "FormalParameter",
    "MethodDeclaration",
    "MethodDeclarator",
    "FormalParameters",
    "VariableOrConstantDeclarator",
    "VariableOrConstantDeclaratorId",
    "VariableOrConstantInitializer",
    "Datatype",
    "CompilationDataType",
    "CollectionTypeName",
    "ScalarDataTypeName",
    "DateTimeLiteral",
    "ExceptionHandler",
    "Skip2NextTerminator",
    "Skip2NextOccurrence",
    "SkipPastNextOccurrence",
    "Skip2NextTokenOccurrence",
    "SkipPastNextTokenOccurrence",
    "Read2NextOccurrence",
    "ReadPastNextOccurrence",
    "SqlStatement",
    "WrappedObject",
    "UnlabelledStatement",
    "Statement",
    "LabelledStatement",
    "CaseStatement",
    "CaseWhenClause",
    "ElseClause",
    "ElsifClause",
    "LoopStatement",
    "ForStatement",
    "WhileStatement",
    "IfStatement",
    "ForIndex",
    "ForAllIndex",
    "ForAllStatement",
    "GotoStatement",
    "ReturnStatement",
    "ContinueStatement",
    "ExitStatement",
    "RaiseStatement",
    "CloseStatement",
    "OpenStatement",
    "FetchStatement",
    "EmbeddedSqlStatement",
    "PipelineStatement",
    "ConditionalCompilationStatement",
    "SubTypeDefinition",
    "FieldDeclaration",
    "CollectionTypeDefinition",
    "CollectionDeclaration",
    "ObjectDeclaration",
    "CallSpecTail",
    "CursorUnit",
    "CursorSpecification",
    "CursorBody",
    "Expression",
    "CompilationExpression",
    "Assignment",
    "CaseExpression",
    "LikeExpression",
    "TrimExpression",
    "ObjectExpression",
    "ConditionalOrExpression",
    "ConditionalAndExpression",
    "EqualityExpression",
    "RelationalExpression",
    "AdditiveExpression",
    "StringExpression",
    "MultiplicativeExpression",
    "UnaryExpression",
    "UnaryExpressionNotPlusMinus",
    "PrimaryExpression",
    "PrimaryPrefix",
    "PrimarySuffix",
    "Literal",
    "StringLiteral",
    "BooleanLiteral",
    "NullLiteral",
    "MultiSetCondition",
    "NumericLiteral",
    "Label",
    "Name",
    "QualifiedName",
    "Arguments",
    "ArgumentList",
    "Argument",
    "VariableOrConstantDeclaration",
    "DatatypeDeclaration",
    "Pragma",
    "ExceptionDeclaration",
    "ParallelClause",
    "Table",
    "TableColumn",
    "View",
    "Synonym",
    "Directory",
    "DatabaseLink",
    "ViewColumn",
    "Comment",
    "TypeMethod",
    "TypeSpecification",
    "AlterTypeSpec",
    "AttributeDeclaration",
    "Attribute",
    "PragmaClause",
    "TriggerUnit",
    "TriggerTimingPointSection",
    "CompoundTriggerBlock",
    "NonDMLTrigger",
    "DDLEvent",
    "DatabaseEvent",
    "NonDMLEvent",
    "AlterTrigger",
    "KEYWORD_RESERVED",
    "KEYWORD_UNRESERVED",
    "ID",
    "UnqualifiedID",
    "QualifiedID",
    "TypeKeyword",
    "JavaInterfaceClass",
    "EqualsOldIDNewID",
  };
}
/* JavaCC - OriginalChecksum=3360baaf4722edd57f5734d5c62c05db (do not edit this line) */
